{"version":3,"sources":["components/images/Background1.jpg","components/card/card.js","components/wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","cardStyle","width","height","Card","props","Characters","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","map","char","react_default","a","createElement","key","id","clicked","className","onClick","yawn","style","alt","name","src","image","about","Wrapper","children","aCStyle","fontSize","fontStyle","margin","bottom","sectionStyle","backgroundSize","backgroundPosition","backgroundImage","background","backgroundRepeat","color","textShadow","ColoredLine","_ref","backgroundColor","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","wins","loss","amountClicked","addTotal","bind","assertThisInitialized","setState","console","log","Fragment","wrapper","App_ColoredLine","card_card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b82d8fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Background1.b8e8a42a.jpg\";","import React from \"react\";\nimport \"./card.css\";\n\nconst cardStyle = {\n    width: '200px',\n    height: '200px'\n};\n\nfunction shuffle(Characters) {\n    var currentIndex = Characters.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        temporaryValue = Characters[currentIndex];\n        Characters[currentIndex] = Characters[randomIndex];\n        Characters[randomIndex] = temporaryValue;\n    }\n\n    return Characters;\n}\n\n\nfunction Card(props) {\n    var hello = shuffle(props.Characters)\n    return (\n        hello.map(char => (\n\n            <button key={char.id} clicked=\"no\" className=\"button\" onClick={props.yawn}>\n                <div className=\"Nope\" >\n                    <div className=\"img-container\" style={(cardStyle)}>\n                        <img alt={char.name} src={char.image} />\n                        <p>{char.about}</p>\n                    </div>\n                </div>\n            </button>\n        ))\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport background from './components/images/Background1.jpg';\nimport Card from './components/card/card.js';\nimport Wrapper from './components/wrapper/index.js';\nimport Characters from './characters.json';\n//import Logo from './logo.svg';\nimport './App.css';\n\nvar aCStyle = {\n  fontSize: \"25px\",\n  fontStyle: \"italic\",\n  margin: \"10px 10px 10px 10px\",\n  bottom: \"4\"\n}\n\nvar sectionStyle = {\n  width: \"100%\",\n  height: \"100%\",\n  backgroundSize: \"cover\",\n  backgroundPosition: \"center\",\n  backgroundImage: \"url(\" + background + \")\",\n  backgroundRepeat: \"no-repeat\",\n  color: \"white\",\n  textShadow: \"2px 2px #006400\"\n};\n\nvar fontStyle = {\n  fontSize: \"25px\",\n  fontStyle: \"italic\"\n}\n\nconst ColoredLine = ({ color }) => (\n  <hr\n    style={{\n      color: color,\n      backgroundColor: color\n    }}\n  />\n);\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      wins: 0,\n      loss: 0,\n      amountClicked: 0\n    }\n\n    this.addTotal = this.addTotal.bind(this);\n  }\n\n  addTotal() {\n    var { amountClicked } = this.state;\n    this.setState({ amountClicked: amountClicked + 1 })\n    console.log(amountClicked)\n  }\n\n  render() {\n    console.log(\"rendering\");\n\n    return (\n      <React.Fragment>\n        <Wrapper>\n          <section style={sectionStyle}>\n            <center><h1>Breaking Bad Click Game</h1></center>\n            <center><h6 style={fontStyle}>\"I am the Danger\"</h6></center>\n            <div className=\"container\">\n              <ColoredLine color=\"white\"></ColoredLine>\n            </div>\n            <center style={fontStyle}><h6>Wins: {this.state.wins}</h6><h6>Loss: {this.state.loss}</h6></center>\n            <h6 style={aCStyle}>Amount Clicked: {this.state.amountClicked} out of 12</h6>\n            <div className=\"container\">\n              <ul>\n                <Card Characters={Characters} yawn = {this.addTotal}/>\n              </ul>\n            </div>\n\n          </section>\n        </Wrapper>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}